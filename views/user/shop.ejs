<%- include("../partials/user/header.ejs") %> 
<style>
      .sort-container {
        margin: 20px 0 30px;
        padding: 0 15px;
    }
    
    .sort-wrapper {
        display: flex;
        align-items: center;
        gap: 10px;
        justify-content: center;
    }
    
    .sort-wrapper label {
        font-size: 14px;
        color: #333;
        font-weight: 500;
    }
    
    .custom-select {
        position: relative;
        min-width: 200px;
    }
    
    .custom-select select {
        appearance: none;
        -webkit-appearance: none;
        width: 100%;
        padding: 8px 35px 8px 12px;
        font-size: 14px;
        border: 1px solid #e2e2e2;
        border-radius: 4px;
        background-color: #fff;
        cursor: pointer;
        color: #333;
        transition: all 0.3s ease;
    }
    
    .custom-select select:hover {
        border-color: #999;
    }
    
    .custom-select select:focus {
        outline: none;
        border-color: #4a90e2;
        box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.1);
    }
    
    .select-arrow {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 5px solid #666;
        pointer-events: none;
    }
    
    .custom-select:hover .select-arrow {
        border-top-color: #333;
    }
    
    .search-container {
        position: relative;
        min-width: 550px;
        margin-right: 150px;
    }
    
    .search-input {
        width: 100%;
        padding: 8px 35px 8px 12px;
        font-size: 14px;
        border: 1px solid #e2e2e2;
        border-radius: 4px;
        transition: all 0.3s ease;
    }
    
    .search-input:focus {
        outline: none;
        border-color: #4a90e2;
        box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.1);
    }
    
    .search-icon {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #666;
        pointer-events: none;
    }

    .product-cart-wrap {
        transition: all 0.3s ease;
    }

    .product-cart-wrap.out-of-stock {
        opacity: 0.6;
        filter: grayscale(50%);
        pointer-events: none;
    }

    .product-cart-wrap.out-of-stock .product-img-action-wrap,
    .product-cart-wrap.out-of-stock .product-action-1 {
        pointer-events: none;
    }

    .product-cart-wrap.out-of-stock a {
        cursor: not-allowed;
    }

    .product-cart-wrap.out-of-stock .out-of-stock-label {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(255, 0, 0, 0.8);
        color: white;
        padding: 8px 16px;
        border-radius: 4px;
        z-index: 2;
    }
    
    @media (max-width: 768px) {
        .sort-wrapper {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }
        
        .search-container,
        .custom-select {
            width: 100%;
            min-width: unset;
            margin-right: 0;
        }
    }

    .pagination-link {
        background-color: #b68b40;
        border-color: #b68b40;
        color: white;
        font-weight: bold;
        border-radius: 8px;
        padding: 8px 14px;
        text-align: center;
        transition: all 0.3s ease;
        display: inline-block;
        margin: 0 6px;
        cursor: pointer;
    }

    .pagination-link:hover {
        background-color: #9f7e49;
        border-color: #9f7e49;
    }

    .page-item.active .pagination-link {
        background-color: #7e5a3b;
        border-color: #7e5a3b;
    }

    .page-item.disabled .pagination-link {
        background-color: #d1c7a1;
        border-color: #d1c7a1;
        color: #a8a8a8;
        cursor: not-allowed;
    }

    
</style>
<main class="main">
    <div class="sort-container">
        <div class="sort-wrapper">
            <div class="search-container">
                <input type="text" id="product-search" class="search-input" placeholder="Search products..." onkeyup="searchProducts()">
                <i class="fi-rs-search search-icon"></i>
            </div>

            <label for="sort-select">Sort by:</label>
            <div class="custom-select">
                <select id="sort-select" onchange="sortProducts()">
                    <option value="featured">Default</option>
                    <option value="featured">Featured</option>
                    <option value="popularity">Popularity</option>
                    <option value="price-low">Price: Low to High</option>
                    <option value="price-high">Price: High to Low</option>
                    <option value="rating">Average Ratings</option>
                    <option value="new">New Arrivals</option>
                    <option value="az">Name: A to Z</option>
                    <option value="za">Name: Z to A</option>
                </select>
                <span class="select-arrow"></span>
            </div>

            <div class="custom-select">
                <select id="cat-filter" class="sort-select" onchange="catFilter()">
                    <option value="all-categories">All Categories</option>
                    <%for(let i=0;i<categories.length;i++){%>
                        <option value="<%=categories[i]._id%>"><%=categories[i].name%></option>
                    <%}%>
                </select>
                <span class="select-arrow"></span>
            </div>
        </div>
    </div>

    <section class="product-tabs section-padding position-relative wow fadeIn animated">
        <div class="bg-square"></div>
        <div class="container">
            <div class="tab-content wow fadeIn animated" id="myTabContent">
                <div class="tab-pane fade show active" id="tab-one" role="tabpanel" aria-labelledby="tab-one">
                    <div class="row product-grid-4" id="product-grid">
                        <% for(let i = 0; i < products.length; i++) { %>
                            <div class="product-cart-wrap mb-30 <%= products[i].quantity === 0 ? 'out-of-stock' : '' %>" style="flex: 1 1 23%; box-sizing: border-box; margin: 10px;">
                                <div class="product-img-action-wrap">
                                    <div class="product-img product-img-zoom">
                                        <a href="<%= products[i].quantity === 0 ? '#' : '/productDetails?id=' + products[i]._id %>">
                                            <img class="default-img" src="/uploads/re-image/<%= products[i].productImage[0] %>" alt="<%= products[i].productName %>">
                                        </a>
                                    </div>
                                    <% if(products[i].quantity === 0) { %>
                                        <div class="out-of-stock-label">Out of Stock</div>
                                    <% } %>
                                </div>
                                <div class="product-content-wrap">
                                    <h6><%= products[i].productName %></h6>
                                    <h6>â‚¹ <%= products[i].salePrice.toLocaleString() %></h6>
                                    <% if(products[i].quantity != 0) { %>
                                        <h6 style="color:green">Stocks: <%= products[i].quantity %></h6>
                                        <div class="product-action-1 show">
                                            <a aria-label="Add To Cart" class="action-btn hover-up" style="margin-top: 10px;" onclick="addToCart('<%= products[i]._id %>')">
                                                <i class="fi-rs-shopping-bag-add"></i>
                                            </a>
                                            <a aria-label="Add To Wishlist" class="action-btn hover-up wishlist-btn" onclick="addToWishlist('<%= products[i]._id %>')">
                                                <i class="fi-rs-heart"></i>
                                            </a>
                                        </div>
                                    <% } else { %>
                                        <h6 style="color:rgb(255, 0, 0)"><%= products[i].status %></h6>
                                    <% } %>
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>

                <nav>
                    <ul class="pagination justify-content-center">
                        <% if (page > 1) { %>
                            <li class="page-item">
                                <a class="page-link pagination-link" href="?page=<%= page - 1 %>&category=<%= selectedCategory %>">Back</a>
                            </li>
                        <% } %>
                
                        <% for (let i = 1; i <= totalPages; i++) { %>
                            <li class="page-item <%= i === page ? 'active' : '' %>">
                                <a class="page-link pagination-link" href="?page=<%= i %>&category=<%= selectedCategory %>"><%= i %></a>
                            </li>
                        <% } %>
                
                        <% if (page < totalPages) { %>
                            <li class="page-item">
                                <a class="page-link pagination-link" href="?page=<%= page + 1 %>&category=<%= selectedCategory %>">Next</a>
                            </li>
                        <% } %>
                    </ul>
                </nav>
            </div>
        </div>
    </section>
</main>
<script>
    function searchProducts() {
    const searchQuery = document.getElementById('product-search').value.toLowerCase();
    
    fetch(`/searchProducts?query=${encodeURIComponent(searchQuery)}`)
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
            return response.json();
        })
        .then(data => updateProductList(data.products))
        .catch(error => console.error('Error searching products:', error));
}

function catFilter() {
    const selectedCategory = document.getElementById('cat-filter').value;
    fetch(`/filter-by-category?category=${selectedCategory}`)
        .then(response => response.json())
        .then(data => updateProductList(data.products))
        .catch(error => console.error('Error:', error));
}

function sortProducts() {
    const sortOption = document.getElementById('sort-select').value;
    fetch(`/sortProducts?sort=${sortOption}`)
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
            return response.json();
        })
        .then(data => {
            if (!Array.isArray(data.products)) {
                console.error('Products data is not an array:', data.products);
                return;
            }
            updateProductList(data.products);
        })
        .catch(error => console.error('Error fetching sorted products:', error));
}

function updateProductList(products) {
    const productsContainer = document.getElementById('product-grid');
    productsContainer.innerHTML = '';

    if (products.length === 0) {
        productsContainer.innerHTML = '<p>No products found.</p>';
        return;
    }

    products.forEach(product => {
        const isOutOfStock = product.quantity === 0;
        const productHTML = `
            <div class="product-cart-wrap mb-30 ${isOutOfStock ? 'out-of-stock' : ''}" style="flex: 1 1 23%; box-sizing: border-box; margin: 10px;">
                <div class="product-img-action-wrap">
                    <div class="product-img product-img-zoom">
                        <a href="${isOutOfStock ? '#' : `/productDetails?id=${product._id}`}">
                            <img class="default-img" src="/uploads/re-image/${product.productImage[0]}" alt="${product.productName}">
                        </a>
                    </div>
                    ${isOutOfStock ? '<div class="out-of-stock-label">Out of Stock</div>' : ''}
                </div>
                <div class="product-content-wrap">
                    <h6>${product.productName}</h6>
                    <h6>â‚¹ ${product.salePrice.toLocaleString()}</h6>
                    ${isOutOfStock ? 
                        `<h6 style="color:rgb(255, 0, 0)">${product.status}</h6>` :
                        `<h6 style="color:green">Stocks: ${product.quantity}</h6>
                         <div class="product-action-1 show">
                            <a aria-label="Add To Cart" class="action-btn hover-up" style="margin-top: 10px;" onclick="addToCart('${product._id}')">
                                <i class="fi-rs-shopping-bag-add"></i>
                            </a>
                            <a aria-label="Add To Wishlist" class="action-btn hover-up wishlist-btn" onclick="addToWishlist('${product._id}')">
                                <i class="fi-rs-heart"></i>
                            </a>
                         </div>`
                    }
                </div>
            </div>
        `;
        productsContainer.insertAdjacentHTML('beforeend', productHTML);
    });
}

    function addToCart(productId) {
    fetch('/addToCart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ id: productId })
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const contentType = response.headers.get("Content-Type");
        if (contentType && contentType.includes("application/json")) {
            return response.json();
        }
        throw new Error("Unexpected response format (not JSON)");
    })
    .then(data => {
        Swal.fire({
            title: 'Cart Updated!',
            text: 'Product added to your cart.',
            icon: 'success',
            confirmButtonText: 'View Cart',
            confirmButtonColor: '#3085d6',
            showCancelButton: true,
            cancelButtonText: 'Continue Shopping',
            cancelButtonColor: '#d33'
        }).then(result => {
            if (result.isConfirmed) {
                // Redirect to /getCart if "View Cart" is clicked
                window.location.href = '/getCart';
            }
        });
    })
    .catch(error => {
        console.error("Error adding product to cart:", error);
        Swal.fire({
            title: 'Error',
            text: 'There was an issue adding the product to your cart. Please try again.',
            icon: 'error',
            confirmButtonText: 'Okay',
            confirmButtonColor: '#3085d6'
        });
    });
}

    function addToWishlist(productId) {
        console.log("Adding to wishlist:", productId);
        fetch('/addToWishlist', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: productId })
        })
        .then(response => {
            if (!response.ok) {
                console.error(`Server responded with error status: ${response.status}`);
                return response.json().then(data => {
                    // Check for specific error message
                    if (data.message === 'Product already in wishlist') {
                        throw new Error('Product already in wishlist');
                    }
                    throw new Error(`HTTP error! Status: ${response.status}`);
                });
            }
            return response.json();
        })
        .then(data => {
            // Success notification with more engaging design
            Swal.fire({
                title: 'Wishlist Updated!',
                html: `
                    <div style="display: flex; flex-direction: column; align-items: center;">
                        <i class="fas fa-heart" style="color: #ff6b6b; font-size: 3rem; margin-bottom: 15px;"></i>
                        <p>Product successfully added to your wishlist.</p>
                        <p>You can view all your saved items in the wishlist.</p>
                    </div>
                `,
                icon: 'success',
                confirmButtonText: 'Continue Shopping',
                confirmButtonColor: '#3085d6',
                showCancelButton: true,
                cancelButtonText: 'View Wishlist',
                cancelButtonColor: '#d33',
                didClose: () => {
                    // Optional: You can add logic to redirect to wishlist or continue shopping
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    // Continue shopping logic
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    // Redirect to wishlist page
                    window.location.href = '/getWishlist';
                }
            });

            console.log('Product added to wishlist:', data);
        })
        .catch(error => {
            if (error.message === 'Product already in wishlist') {
                // Notification for already existing product
                Swal.fire({
                    title: 'Oops! Duplicate Item',
                    html: `
                        <div style="display: flex; flex-direction: column; align-items: center;">
                            <i class="fas fa-heart-broken" style="color: #ffa500; font-size: 3rem; margin-bottom: 15px;"></i>
                            <p>This product is already in your wishlist.</p>
                            <p>Check your wishlist to view or manage your saved items.</p>
                        </div>
                    `,
                    icon: 'info',
                    confirmButtonText: 'View Wishlist',
                    confirmButtonColor: '#3085d6',
                    showCancelButton: true,
                    cancelButtonText: 'Continue Shopping',
                    cancelButtonColor: '#d33'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Redirect to wishlist
                        window.location.href = '/getWishlist';
                    }
                });
            } else {
                // Error notification
                Swal.fire({
                    title: 'Wishlist Error',
                    html: `
                        <div style="display: flex; flex-direction: column; align-items: center;">
                            <i class="fas fa-exclamation-triangle" style="color: #ff4500; font-size: 3rem; margin-bottom: 15px;"></i>
                            <p>Failed to add product to wishlist.</p>
                            <p>Please try again or contact support if the issue persists.</p>
                        </div>
                    `,
                    icon: 'error',
                    confirmButtonText: 'Try Again',
                    confirmButtonColor: '#3085d6',
                    
                });
            }
        });
    }

</script>
<%- include("../partials/user/footer.ejs") %> 