<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Arial', sans-serif;
    }

    body {
      background-color: #ffffff;
      min-height: 100vh;
      display: flex;
      padding: 20px;
    }

    .dashboard-container {
      display: flex;
      width: 100%;
      max-width: 1400px;
      margin: 0 auto;
      gap: 30px;
      background: #fff;
      border-radius: 20px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.05);
    }

    .sidebar {
      width: 280px;
      background: #fafafa;
      padding: 30px 20px;
      border-radius: 20px 0 0 20px;
    }

    .main-content {
      flex: 1;
      padding: 30px;
    }

    .profile-section {
      text-align: center;
      margin-bottom: 40px;
    }

    .profile-avatar {
      width: 90px;
      height: 90px;
      border-radius: 50%;
      background: #fff;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 15px;
      font-size: 28px;
      color: #b68b40;
      border: 2px solid #b68b40;
    }

    .profile-name {
      color: #333;
      font-size: 18px;
      margin-bottom: 5px;
    }

    .profile-email {
      color: #666;
      font-size: 14px;
    }


    .nav-links {
      list-style: none;
    }

    .nav-links li button {
      width: 100%;
      text-align: left;
      padding: 12px 20px;
      margin-bottom: 8px;
      border: none;
      background: none;
      color: #666;
      cursor: pointer;
      border-radius: 10px;
      transition: all 0.3s ease;
      font-size: 15px;
    }

    .nav-links li button:hover {
      background: #f0f0f0;
      color: #b68b40;
    }

    .nav-links li button.active {
      background: #b68b40;
      color: white;
    }

    .dashboard-section {
      display: none;
    }

    .dashboard-section.active {
      display: block;
    }

    .section-title {
      color: #333;
      margin-bottom: 30px;
      font-size: 24px;
      font-weight: 500;
    }

    .btn {
      padding: 10px 20px;
      border-radius: 8px;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 14px;
    }

    .btn-primary {
      background: #b68b40;
      color: white;
    }

    .btn-outline {
      background: none;
      border: 1px solid #b68b40;
      color: #b68b40;
    }

    .address-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 70px;
      margin-top: 20px;
    }

    .address-card {
      background: #fafafa;
      border-radius: 12px;
      padding: 20px;
      position: relative;
    }

    .address-actions {
      position: absolute;
      top: 15px;
      right: 15px;
      display: flex;
      gap: 8px;
    }

    .wallet-overview {
      background: #fafafa;
      border-radius: 15px;
      padding: 30px;
      margin-bottom: 30px;
    }

    .wallet-balance {
      font-size: 32px;
      color: #333;
      margin: 15px 0;
    }

    .wallet-actions {
      display: flex;
      gap: 10px;
    }

    .transaction-table {
      width: 100%;
      border-collapse: collapse;
    }

    .transaction-table th {
      text-align: left;
      padding: 15px;
      border-bottom: 2px solid #f0f0f0;
      color: #666;
      font-weight: 500;
    }

    .transaction-table td {
      padding: 15px;
      border-bottom: 1px solid #f0f0f0;
      color: #333;
    }

    /* Statuses */
    .status-completed {
      /* background-color: #4CAF50; Green */
      color: white;
      padding: 5px 10px;
      border-radius: 5px;
    }

    .status-pending {
      /* background-color: #FF9800; Orange */
      color: white;
      padding: 5px 10px;
      border-radius: 5px;
    }

    .status-cancelled {
      /* background-color: #F44336; Red */
      color: white;
      padding: 5px 10px;
      border-radius: 5px;
    }

    .type-credit {
      color: #28a745;
    }

    .type-debit {
      color: #dc3545;
    }

    .logout-btn {
      color: #dc3545;
      margin-top: 20px;
    }

    .cancel-btn {
      background-color: #d9534f;
      color: white;
      /* White text color */
      border: none;
      padding: 8px 16px;
      font-size: 14px;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .cancel-btn:hover {
      background-color: #c9302c;
    }

    .view-details-btn {
      background-color: #b68b40;
      color: white;
      /* White text */
      border: none;
      /* Remove border */
      padding: 8px 16px;
      /* Padding for a comfortable button size */
      font-size: 14px;
      /* Font size */
      border-radius: 4px;
      /* Rounded corners */
      cursor: pointer;
      /* Pointer cursor on hover */
      transition: background-color 0.3s;
      /* Smooth transition for hover effect */
    }

    .view-details-btn:hover {
      background-color: #9f762f;
    }

    .product-image {
      width: 50px;
      height: 50px;
      object-fit: cover;
      border-radius: 4px;
    }

    .product-list {
      display: flex;
      flex-direction: column;
    }

    .product-item {
      display: flex;
      align-items: center;
      margin-bottom: 5px;
    }

    .product-item img {
      width: 50px;
      height: 50px;
      margin-right: 10px;
    }

    .swal2-container {
      z-index: 99999 !important;
    }

    .wallet-header {
      margin-bottom: 2rem;
    }


    .wallet-card {
      background: linear-gradient(135deg, #232526 0%, #414345 100%);
      border-radius: 16px;
      padding: 2rem;
      color: white;
      margin-top: 1.5rem;
      box-shadow: 0 4px 15px rgba(35, 37, 38, 0.2);
    }

    .balance-info {
      margin-bottom: 1.5rem;
    }

    .balance-label {
      font-size: 0.9rem;
      opacity: 0.9;
    }

    .balance-amount {
      font-size: 2.5rem;
      font-weight: 600;
      margin: 0.5rem 0;
    }

    .balance-date {
      font-size: 0.8rem;
      opacity: 0.8;
    }

    .wallet-actions {
      display: flex;
      gap: 1rem;
    }

    .wallet-actions .btn {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      padding: 0.8rem;
      border-radius: 8px;
      font-weight: 500;
    }

    .transactions-section {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .transactions-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .transaction-filters {
      display: flex;
      gap: 1rem;
      align-items: center;
      flex-wrap: wrap;
    }

    .search-box input {
      padding: 0.5rem 1rem;
      border: 1px solid #e0e0e0;
      border-radius: 6px;
      width: 250px;
      font-size: 0.9rem;
    }

    .filter-buttons {
      display: flex;
      gap: 0.5rem;
    }

    .filter-btn {
      padding: 0.5rem 1rem;
      border: 1px solid #e0e0e0;
      border-radius: 6px;
      background: white;
      cursor: pointer;
      font-size: 0.9rem;
      transition: all 0.3s ease;
    }

    .filter-btn.active {
      background: #b68b40;
      color: white;
      border-color: #b68b40;
    }

    .transactions-table-wrapper {
      overflow-x: auto;
    }

    .transaction-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0 0.5rem;
    }

    .transaction-table th {
      background: #f8f9fa;
      padding: 1rem;
      font-weight: 500;
      text-align: left;
      color: #666;
    }

    .transaction-row {
      background: white;
      transition: all 0.3s ease;
    }

    .transaction-row:hover {
      background: #f8f9fa;
    }

    .transaction-row td {
      padding: 1rem;
      border-top: 1px solid #f0f0f0;
      border-bottom: 1px solid #f0f0f0;
    }

    .date-group {
      display: flex;
      flex-direction: column;
    }

    .date {
      font-weight: 500;
    }

    .time {
      font-size: 0.8rem;
      color: #666;
    }

    .transaction-info {
      display: flex;
      flex-direction: column;
    }

    .transaction-title {
      font-weight: 500;
    }

    .transaction-id {
      font-size: 0.8rem;
      color: #666;
    }

    .badge {
      padding: 0.25rem 0.75rem;
      border-radius: 999px;
      font-size: 0.8rem;
      font-weight: 500;
    }

    .badge.credit {
      background: #e8f5e9;
      color: #2e7d32;
    }

    .badge.refund {
      background: #e8f5e9;
      color: #2e7d32;
    }

    .badge.debit {
      background: #ffebee;
      color: #c62828;
    }
    .badge.referral {
      background: #eee;
      color: #ef6c00;
    }

    .amount {
      font-weight: 500;
    }

    .amount.credit {
      color: #2e7d32;
    }

    .amount.refund {
      color: #2e7d32;
    }

    .amount.debit {
      color: #c62828;
    }
    .amount.referral {
      color: #ef6c00;
    }

    .status-badge {
      padding: 0.25rem 0.75rem;
      border-radius: 999px;
      font-size: 0.8rem;
      font-weight: 500;
    }

    .status-badge.success {
      background: #e8f5e9;
      color: #2e7d32;
    }

    .status-badge.pending {
      background: #fff3e0;
      color: #ef6c00;
    }

    /* Updated Address Section Styles */
    .address-section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      padding: 0 1rem;
    }

    .add-address-btn {
      background: #b68b40;
      color: white;
      border: none;
      padding: 0.8rem 1.5rem;
      border-radius: 8px;
      font-size: 0.9rem;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.3s ease;
    }

    .add-address-btn:hover {
      background: #9a7535;
      transform: translateY(-1px);
    }

    .address-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1.5rem;
      padding: 1rem;
    }

    .address-card {
      background: #ffffff;
      border-radius: 12px;
      padding: 1.5rem;
      position: relative;
      border: 1px solid #e0e0e0;
      transition: all 0.3s ease;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }

    .address-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .address-type {
      background: #f8f9fa;
      color: #b68b40;
      padding: 0.4rem 1rem;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 500;
      display: inline-block;
      margin-bottom: 1rem;
    }

    .address-info {
      margin-bottom: 1.5rem;
    }

    .address-name {
      font-size: 1.1rem;
      font-weight: 600;
      color: #333;
      margin-bottom: 0.5rem;
    }

    .address-details {
      color: #666;
      font-size: 0.9rem;
      line-height: 1.6;
    }

    .address-contact {
      margin-top: 1rem;
      padding-top: 1rem;
      border-top: 1px solid #eee;
    }

    .phone-number {
      color: #666;
      font-size: 0.9rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .address-actions {
      position: absolute;
      top: 1rem;
      right: 1rem;
      display: flex;
      gap: 0.5rem;
    }

    .action-btn {
      background: none;
      border: 1px solid #b68b40;
      color: #b68b40;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      font-size: 0.8rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .action-btn:hover {
      background: #b68b40;
      color: white;
    }

    .action-btn.delete {
      border-color: #dc3545;
      color: #dc3545;
    }

    .action-btn.delete:hover {
      background: #dc3545;
      color: white;
    }
    .card {
    border: 1px solid #ddd;
    border-radius: 8px;
    background-color: #fff;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 20px;
  }

  .card-title {
    color: #b68b40;
    margin-bottom: 20px;
  }

  .input-group {
    display: flex;
    align-items: center;
  }

  .input-group input {
    flex: 1;
    border: 1px solid #ddd;
    border-radius: 4px 0 0 4px;
    padding: 10px;
    font-size: 16px;
  }

  .input-group button {
    border: none;
    background-color: #b68b40;
    color: #fff;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 0 4px 4px 0;
  }

  .rewards-info {
    display: flex;
    gap: 20px;
  }

  .rewards-info .card {
    flex: 1;
    background-color: #f5f5f5;
    text-align: center;
    padding: 20px;
  }

  .rewards-info h5 {
    color: #b68b40;
    margin-bottom: 10px;
  }

  .how-it-works {
    display: flex;
    justify-content: space-between;
    gap: 20px;
  }

  .how-it-works .step {
    text-align: center;
  }

  .how-it-works .step .circle {
    display: inline-block;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: #f5f5f5;
    color: #b68b40;
    font-weight: bold;
    line-height: 40px;
    margin-bottom: 10px;
  }

  .share-buttons {
    display: flex;
    gap: 10px;
  }

  .share-buttons button {
    padding: 10px 20px;
    background-color: transparent;
    border: 1px solid #b68b40;
    color: #b68b40;
    cursor: pointer;
    border-radius: 4px;
  }
  /* Pagination Container */
.pagination-area {
    margin-top: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Pagination List */
.pagination {
    list-style: none;
    display: flex;
    padding: 0;
    gap: 10px;
}

/* Pagination Item */
.pagination .page-item {
    display: inline-block;
}

/* Links */
.pagination .page-link {
    display: inline-block;
    padding: 8px 12px;
    color: #007bff;
    text-decoration: none;
    border: 1px solid #ddd;
    border-radius: 5px;
    transition: all 0.3s ease-in-out;
    background-color: #f9f9f9;
}

/* Hover Effect */
.pagination .page-link:hover {
    background-color: #007bff;
    color: #fff;
    border-color: #007bff;
}

/* Active Page */
.pagination .page-item.active .page-link {
    background-color: #007bff;
    color: #fff;
    border-color: #007bff;
    pointer-events: none;
}

/* Disabled Page (Optional) */
.pagination .page-item.disabled .page-link {
    color: #6c757d;
    pointer-events: none;
    background-color: #e9ecef;
    border-color: #e9ecef;
}

/* Responsive Design */
@media (max-width: 576px) {
    .pagination .page-link {
        padding: 6px 10px;
        font-size: 14px;
    }
}
.confetti {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 9999;
        }
        .confetti-piece {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: transparent;
            top: -10px;
            z-index: 9999;
        }
        @keyframes fall {
            to {
                transform: translateY(100vh) rotate(360deg);
            }
        }
        .celebration-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            padding: 40px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            z-index: 10000;
            opacity: 0;
            transition: all 0.3s ease;
        }
        .celebration-modal.show {
            opacity: 1;
            animation: popIn 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55);
        }
        @keyframes popIn {
            0% { transform: translate(-50%, -50%) scale(0.5); opacity: 0; }
            100% { transform: translate(-50%, -50%) scale(1); opacity: 1; }
        }

    
  </style>
</head>

<body>
  <div class="dashboard-container">
    <div class="sidebar">
      <div class="profile-section">
        <div class="profile-avatar">
          <%= user.name.charAt(0).toUpperCase() %>
        </div>
        <h2 class="profile-name">
          <%= user.name %>
        </h2>
        <p class="profile-email">
          <%= user.email %>
        </p>
      </div>
      <ul class="nav-links">
        <li><button onclick="showSection('dashboard')" class="nav-button active">Dashboard</button></li>
        <li><button onclick="showSection('address')" class="nav-button">My Address</button></li>
        <li><button onclick="showSection('orders')" class="nav-button">Orders</button></li>
        <li><button onclick="showSection('wallet')" class="nav-button">My Wallet</button></li>
        <li><button onclick="showSection('referrals')" class="nav-button">Referrals</button></li>
        <li><button onclick="confirmLogout(event)" class="nav-button logout-btn">Logout</button></li>
      </ul>
    </div>

    <div class="main-content">
      <div id="dashboard" class="dashboard-section active" style="max-width: 900px; width: 100%; background-color: #fff; box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1); border-radius: 8px; overflow: hidden;">

        <div class="header" style="background-color: #b68b40; color: #fff; padding: 20px; text-align: center;">
            <h2 style="font-size: 1.6em; margin: 0; color: #fff;">Dashboard</h2>
            <p style="font-size: 1em; color: #fff; margin-top: 5px;">Welcome, <%= user.name %></p>
        </div>

        <div class="user-info" style="padding: 20px;">
            <h3 style="font-size: 1.4em; color: #333; margin-bottom: 10px; border-bottom: 2px solid #b68b40; padding-bottom: 5px;">
                User Profile
            </h3>
            <p style="font-size: 1em; color: #555; margin: 10px 0;">
                <strong style="color: #333;">Phone:</strong> <%= user.phone %>
            </p>
            <p style="font-size: 1em; color: #555; margin: 10px 0;">
                <strong style="color: #333;">Email:</strong> <%= user.email %>
            </p>
            <div style="margin-top: 20px; text-align: center;">
                <a href="/change-email" style="font-size: 0.9em; color: #fff; background-color: #b68b40; padding: 8px 16px; border-radius: 4px; text-decoration: none; transition: background-color 0.3s ease;">
                    Change Email
                </a>
                <a href="/change-password" style="font-size: 0.9em; color: #fff; background-color: #b68b40; padding: 8px 16px; border-radius: 4px; text-decoration: none; transition: background-color 0.3s ease; margin-left: 10px;">
                    Change Password
                </a>
            </div>
        </div> 
        <br> <br>

        <% if (latestCoupon) { %>
        <div class="coupon-section" style="background-color: #f4f4f4; padding: 20px; text-align: center;">
            <h3 style="font-size: 1.6em; color: #b68b40; margin-bottom: 15px; margin-top: 20px;">
                Latest Coupon
            </h3>
            <div style="background-color: #fff; border: 2px dashed #b68b40; padding: 15px; border-radius: 8px;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div style="text-align: left;">
                        <p style="font-size: 0.9em; color: #666; margin-bottom: 5px;">Coupon Code</p>
                        <p id="couponCode" style="font-size: 1.4em; color: #b68b40; font-weight: bold;">
                            <%= latestCoupon.name %>
                        </p>
                    </div>
                    <button 
                        onclick="copyCouponWithCelebration()"
                        style="background-color: #b68b40; color: #fff; padding: 10px 20px; border-radius: 4px; border: none; cursor: pointer;"
                    >
                        Copy Coupon
                    </button>
                </div>
                <div style="margin-top: 10px; font-size: 0.9em; color: #666;">
                    <p>
                        <%= latestCoupon.offerPercentage %>% OFF | 
                        Minimum Purchase: $<%= latestCoupon.minimumPrice %> | 
                        Maximum Discount: $<%= latestCoupon.maximumPrice %>
                    </p>
                    <p>
                        Valid until: <%= new Date(latestCoupon.expireOn).toLocaleDateString() %>
                    </p>
                </div>
            </div>
        </div>
        <% } %>
    </div>

    <div id="celebrationModal" class="celebration-modal">
        <h2 style="font-size: 2em; color: #b68b40; margin-bottom: 15px;">Yayyy Congrats!</h2>
        <p style="font-size: 1.2em; color: #333; margin-bottom: 10px;">Coupon Copied Successfully</p>
        <p style="font-size: 1em; color: #666;">Continue Shopping and Save Big!</p>
    </div>

    <canvas id="confettiCanvas" class="confetti"></canvas>

      <div id="address" class="dashboard-section">
        <div class="address-section-header">
          <h2 class="section-title">My Addresses</h2>
          <a href="/addAddress" style="text-decoration: none;">
            <button class="add-address-btn">
              <i class="fas fa-plus"></i>
              Add New Address
            </button>
          </a>
        </div>

        <div class="address-grid">
          <%userAddress.address.forEach((addr)=>{%>
            <div class="address-card">
              <span class="address-type"> 
                <%= addr.addressType %>
              </span>

              <div class="address-info">
                <h3 class="address-name">
                  <%= addr.name %>
                </h3>
                <div class="address-details">
                  <p>
                    <%= addr.landMark %>
                  </p>
                  <p>
                    <%= addr.city %>, <%= addr.state %>
                  </p>
                  <p>PIN: <%= addr.pincode %>
                  </p>
                </div>
              </div>

              <div class="address-contact">
                <div class="phone-number">
                  <i class="fas fa-phone"></i>
                  <%= addr.phone %>
                </div>
                <% if(addr.altPhone) { %>
                  <div class="phone-number">
                    <i class="fas fa-phone"></i>
                    <%= addr.altPhone %> (Alternative)
                  </div>
                  <% } %>
              </div>

              <div class="address-actions">
                <a href="/editAddress?id=<%= addr._id %>">
                  <button class="action-btn">Edit</button>
                </a>
                <a href="/deleteAddress?id=<%= addr._id %>" onclick="return confirmDelete(event)">
                  <button class="action-btn delete">Delete</button>
                </a>
              </div>
            </div>
            <%})%>
        </div>
      </div>

      <div id="orders" class="dashboard-section">
        <h2 class="section-title">My Orders</h2>
        <table class="transaction-table">
          <thead>
            <tr>

              <th>Product Name</th>
              <th>Date</th>
              <th>Status</th>
              <th>Quantity</th>
              <th>Payment Method</th>
              <th>Total</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            <% orders.forEach(order=> { %>
              <tr id="order-row-<%= order._id %>">
                <td colspan="1">
                  <div class="product-list">
                    <% order.orderedItems.forEach(item => { %>
                      <div class="product-item">
                        <p>
                          <% if (item.product) { %>
                            <%= item.product.productName %>
                          <% } else { %>
                            Product not available
                          <% } %>
                        </p>
                      </div>
                    <% }) %>
                  </div>
                </td>
                
                <td>
                  <%= new Date(order.createdOn).toLocaleDateString() %>
                </td>

                <td id="order-status-<%= order._id %>" class="status-<%= order.status.toLowerCase() %>">
                  <%= order.status %>
                </td>

                <td>
                  <div>
                    <% order.orderedItems.forEach(item=> { %>
                      <div>
                        <%= item.quantity %>
                      </div>
                      <% }) %>
                  </div>
                </td>
        
                <td>
                  <%= order.paymentMethod %>
                </td>

                <td>₹ <%= order.finalAmount %>
                </td>

                <td id="order-action-<%= order._id %>">
                  <a class="view-details-btn btn" style="margin-right: 5px; text-decoration: none;"
                    href="/orderDetails?id=<%= order._id %>">
                    View Details
                  </a>
                  <% if (order.status==='Pending' ) { %>
                    <button class="cancel-btn" onclick="confirmCancelOrder('<%= order._id %>')">Cancel</button>
                    <% } else { %>
                      <span></span>
                      <% } %>
                      <% if (order.status && order.status.toLowerCase()==="delivered" ) { %>
                        <button class="btn btn-sm btn-outline-warning" 
                          onclick="confirmReturn('<%= order._id %>')">Return</button>
                        <% } %>
                </td>
              </tr>
              <% }) %>
          </tbody>
        </table>

        <div class="pagination-area my-4">
          <nav>
              <ul class="pagination justify-content-center"> 
                  <% for(let i=1;i<=totalPages;i++){ %>
                      <li class="page-item <%= (i===page) ? 'active' : '' %>">
                          <a class="page-link" style="z-index: 100;" href="?page=<%= i %>">
                              <%= i %>
                          </a>
  
  
                      </li>
                      <% } %>
              </ul>
          </nav>
      </div>

      </div>

      <div id="wallet" class="dashboard-section">
        <div class="wallet-header">
          <h1>My Wallet</h1>
          <div class="wallet-card">
            <div class="balance-info">
              <span class="balance-label">Available Balance</span>
              
              <h1 class="balance-amount">₹<%= walletData.balance.toFixed(2) %>
              </h1>
              <span class="balance-date">As of <%= new Date().toLocaleDateString() %></span>
            </div>
            <!-- <div class="wallet-actions">
              <button class="btn btn-primary" onclick="handleTransaction('deposit')">
                <i class="fas fa-plus-circle"></i> Add Money
              </button>--
              <button class="btn btn-outline" onclick="handleTransaction('withdraw')">
                <i class="fas fa-minus-circle"></i> Withdraw
              </button>
            </div> -->
          </div>
        </div>

        <div class="transactions-section">
          <div class="transactions-header">
            <h3>Transaction History</h3>
            <div class="transaction-filters">
              <div class="search-box">
                <input type="text" id="searchTransaction" placeholder="Search transactions..."
                  onkeyup="filterTransactions()">
              </div>
              <!-- <div class="filter-buttons">
              <button class="filter-btn active" data-filter="all">All</button>
              <button class="filter-btn" data-filter="credit">Credit</button>
              <button class="filter-btn" data-filter="debit">Debit</button>
              <button class="filter-btn" data-filter="refund">Refund</button>
            </div> -->
            </div>
          </div>

          <div class="transactions-table-wrapper">
            <table class="transaction-table">
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Product</th>
                  <th>Type</th>
                  <th>Amount</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody>
                <% walletData.transactions.forEach(transaction=> { %>
                  <tr class="transaction-row <%= transaction.type %>">
                    <td>
                      <div class="date-group">
                        <span class="date">
                          <%= new Date(transaction.date).toLocaleDateString() %>
                        </span>
                      </div>
                    </td>
                    <td>
                      <div class="transaction-info">
                        <% if (transaction.orderId && transaction.orderId.orderedItems.length) { %>
                          <% transaction.orderId.orderedItems.forEach(item=> { %>
                            <span class="transaction-title">
                              <%= item.product.productName %>
                            </span><br>
                            <% }); %>
                              <% } else if(transaction.type == 'referral') { %>
                                <span class="transaction-title">Referral</span>
                                <% } else { %>
                                  <span class="transaction-title">No Product Available</span>
                                  <% } %>
                      </div>
                    </td>
                    <td>
                      <span class="badge <%= transaction.type %>">
                        <%= transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1) %>
                      </span>
                    </td>
                    <td class="amount <%= transaction.type %>">
                      <%= (transaction.type === 'credit' || transaction.type === 'refund' || transaction.type === 'referral') ? '+' : '-' %>₹<%= 
                          transaction.amount.toFixed(2) %>
                    </td>
                    
                    <td>
                      <span class="status-badge 
                        <%= transaction.status === 'Refunded' ? 'warning' : 'success' %>">
                        <%= transaction.status==='Refunded' ? 'Refunded' : 'Completed' %>
                        

                      </span>
                    </td>
                  </tr>
                  <% }); %>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <div id="referrals" class="dashboard-section">
        <div class="container">
          <div class="card">
            <h3 class="card-title">My Referrals</h3>
      
            <div class="mb-4">
              <label class="form-label">Your Referral Code</label>
              <div style="margin-top: 10px;" class="input-group">
                <input type="text" id="referralCode" value="<%= user.referalCode %>" readonly />
                <button onclick="copyReferralCode()">Copy Code</button> 
              </div> <br>
              <small class="text-muted mt-2">Share this code with friends to earn rewards!</small> <br> <br>
            </div>
      
            <div class="rewards-info mb-4">
              <div class="card">
                <h5>Referrer Bonus</h5>
                <p class="h3">₹120</p>
                <small>When your friend signs up</small>
              </div>
              <div class="card">
                <h5>Friend's Bonus</h5>
                <p class="h3">₹100</p>
                <small>When they use your code</small>
              </div>
            </div> <br>
      
            <div class="mb-4"> <br>
              <h4 class="mb-3">How It Works</h4> <br>
              <div class="how-it-works">
                <div class="step">
                  <div class="circle">1</div>
                  <h6>Share Your Code</h6>
                  <p class="text-muted small">Share your unique referral code with friends</p>
                </div>
                <div class="step">
                  <div class="circle">2</div>
                  <h6>Friend Signs Up</h6>
                  <p class="text-muted small">They use your code during registration</p>
                </div>
                <div class="step">
                  <div class="circle">3</div>
                  <h6>Both Get Rewarded</h6>
                  <p class="text-muted small">You get ₹120, they get ₹100</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      function copyCouponWithCelebration() {
      
            const couponCode = document.getElementById('couponCode');
            const tempInput = document.createElement('input');
            tempInput.value = couponCode.textContent.trim();
            document.body.appendChild(tempInput);
            tempInput.select();
            document.execCommand('copy');
            document.body.removeChild(tempInput);

            const celebrationModal = document.getElementById('celebrationModal');
            celebrationModal.classList.add('show');

            setTimeout(() => {
                celebrationModal.classList.remove('show');
            }, 3000);

            createConfetti();
        }

        function createConfetti() {
            const canvas = document.getElementById('confettiCanvas');
            const ctx = canvas.getContext('2d');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;

            const confettiColors = [
                ' #e81416', '#ffa500', '#faeb36', '#79c314', 
                '#487de7', '#4b369d', '#70369d', '#b59b3d'
            ];

            const confettiPieces = 150;

            function createConfettiPiece() {
                const piece = document.createElement('div');
                piece.classList.add('confetti-piece');
                piece.style.backgroundColor = confettiColors[Math.floor(Math.random() * confettiColors.length)];
                piece.style.left = `${Math.random() * window.innerWidth}px`;
                piece.style.animationDuration = `${Math.random() * 3 + 2}s`;
                piece.style.transform = `rotate(${Math.random() * 360}deg)`;
                piece.style.animation = `fall ${Math.random() * 3 + 2}s linear`;
                
                document.body.appendChild(piece);

                setTimeout(() => {
                    document.body.removeChild(piece);
                }, 5000);
            }

            for (let i = 0; i < confettiPieces; i++) {
                createConfettiPiece();
            }
        }

      function copyReferralCode() {
        const referralCodeInput = document.getElementById('referralCode');
        referralCodeInput.select();
        document.execCommand('copy');

        Swal.fire({
          title: 'Copied!',
          text: 'Referral code copied to clipboard',
          icon: 'success',
          timer: 1500,
          showConfirmButton: false
        });
      }

      function showSection(sectionId) {

        const sections = document.querySelectorAll('.dashboard-section');
        sections.forEach(section => section.classList.remove('active'));

        const buttons = document.querySelectorAll('.nav-links button');
        buttons.forEach(button => button.classList.remove('active'));

        document.getElementById(sectionId).classList.add('active');
        const activeButton = Array.from(buttons).find(button => button.textContent.toLowerCase() === sectionId);
        if (activeButton) activeButton.classList.add('active');
      }

      document.addEventListener('DOMContentLoaded', () => {
        showSection('dashboard');
      });
      window.onload = function () {
        const hash = window.location.hash.substring(1);
        if (hash) {
          showSection(hash); 
        } else {
          showSection('dashboard'); 
        }
      };

      function confirmDelete(event) {
        event.preventDefault(); 
        const url = event.currentTarget.href; 
        Swal.fire({
          title: 'Are you sure?',
          text: "You won't be able to revert this!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#b68b40',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = url;
          }
        });
      }
      function confirmLogout(event) {
        event.preventDefault(); 

        Swal.fire({
          title: 'Are you sure?',
          text: "Do you really want to log out?",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#b68b40',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, logout'
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = '/logout';
          }
        });
      }

      async function confirmCancelOrder(orderId) {
        const result = await Swal.fire({
          title: 'Cancel Order',
          text: 'Are you sure you want to cancel this order? This action cannot be undone.',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, Cancel',
          cancelButtonText: 'No, Keep',
          confirmButtonColor: '#e74c3c', 
          cancelButtonColor: '#6c757d', 
          reverseButtons: true 
        });

        if (result.isConfirmed) {
          try {
            const response = await fetch('/cancelOrder', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ orderId })
            });

            const data = await response.json();

            if (response.ok && data.message?.toLowerCase().includes('success')) {
              Swal.fire({
                title: 'Order Cancelled',
                text: 'Your order has been successfully cancelled.',
                icon: 'success',
                confirmButtonText: 'OK',
                confirmButtonColor: '#4caf50' 
              });

              document.getElementById(`order-status-${orderId}`).innerText = 'Cancelled';
              document.getElementById(`order-action-${orderId}`).innerHTML = '<span class="text-muted">Cancelled</span>';
            } else {
              Swal.fire({
                title: 'Cancellation Failed',
                text: data.message || 'An error occurred while cancelling your order. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK',
                confirmButtonColor: '#e74c3c'
              });
            }
          } catch (error) {
            Swal.fire({
              title: 'Network Error',
              text: 'Unable to connect to the server. Please check your internet connection.',
              icon: 'error',
              confirmButtonText: 'Retry',
              confirmButtonColor: '#e74c3c'
            });
          }
        }
      }

      document.head.appendChild(style);
      document.addEventListener('DOMContentLoaded', function () {

        const filterButtons = document.querySelectorAll('.filter-btn');
        const transactionRows = document.querySelectorAll('.transaction-row');

        filterButtons.forEach(button => {
          button.addEventListener('click', () => {
            filterButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            const filterValue = button.getAttribute('data-filter');

            transactionRows.forEach(row => {
              if (filterValue === 'all') {
                row.style.display = '';
              } else {
                row.style.display = row.classList.contains(filterValue) ? '' : 'none';
              }
            });
          });
        });
      });

      function filterTransactions() {
        const searchInput = document.getElementById('searchTransaction');
        const filter = searchInput.value.toLowerCase();
        const rows = document.querySelectorAll('.transaction-row');

        rows.forEach(row => {
          const text = row.textContent.toLowerCase();
          row.style.display = text.includes(filter) ? '' : 'none';
        });
      }

      function handleTransaction(type) {
        Swal.fire({
          title: type === 'deposit' ? 'Add Money' : 'Withdraw',
          input: 'number',
          inputLabel: 'Amount',
          inputPlaceholder: 'Enter amount',
          showCancelButton: true,
          confirmButtonColor: '#b68b40',
          cancelButtonColor: '#d33',
          confirmButtonText: type === 'deposit' ? 'Add' : 'Withdraw',
          inputValidator: (value) => {
            if (!value) {
              return 'Please enter an amount!';
            }
            if (value <= 0) {
              return 'Amount must be greater than 0!';
            }
          }
        }).then((result) => {
          if (result.isConfirmed) {
            Swal.fire(
              'Success!',
              `${type === 'deposit' ? 'Money added' : 'Withdrawal processed'} successfully!`,
              'success'
            );
          }
        });
      }

      async function confirmReturn(orderId) {
          try {
            const result = await Swal.fire({
              title: "Return Order?",
              icon: "warning",
              text: "Reason for Returning Product",
              html: `<textarea id="returnReason" class="swal2-textarea" placeholder="Enter your reason here"></textarea>`,
              showCancelButton: true,
              confirmButtonText: 'Submit',
              cancelButtonText: 'Cancel',
              preConfirm: () => {
                const reason = document.getElementById('returnReason').value.trim();
                if (!reason) {
                  Swal.showValidationMessage('Reason cannot be empty');
                }
                return reason;
              }
            });

            if (result.isConfirmed) {
              const reason = result.value;

              const response = await fetch('/return-request', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json', 
                },
                body: JSON.stringify({ 
                  orderId: orderId,
                  reason: reason,
                }),
              });

              const responseData = await response.json();
              if (response.ok) {
                Swal.fire('Success!', responseData.message, 'success');
              } else {
                Swal.fire('Error!', responseData.message, 'error');
              }
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire('Error!', 'Something went wrong. Please try again.', 'error');
          }
        }


    </script>
</body>

</html> 