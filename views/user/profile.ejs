<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Arial', sans-serif;
    }

    body {
      background-color: #ffffff;
      min-height: 100vh;
      display: flex;
      padding: 20px;
    }

    .dashboard-container {
      display: flex;
      width: 100%;
      max-width: 1400px;
      margin: 0 auto;
      gap: 30px;
      background: #fff;
      border-radius: 20px;
      box-shadow: 0 0 20px rgba(0,0,0,0.05);
    }

    .sidebar {
      width: 280px;
      background: #fafafa;
      padding: 30px 20px;
      border-radius: 20px 0 0 20px;
    }

    .main-content {
      flex: 1;
      padding: 30px;
    }

    .profile-section {
      text-align: center;
      margin-bottom: 40px;
    }

    .profile-avatar {
      width: 90px;
      height: 90px;
      border-radius: 50%;
      background: #fff;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 15px;
      font-size: 28px;
      color: #b68b40;
      border: 2px solid #b68b40;
    }

    .profile-name {
      color: #333;
      font-size: 18px;
      margin-bottom: 5px;
    }

    .profile-email {
      color: #666;
      font-size: 14px;
    }

    
    .nav-links {
      list-style: none;
    }

    .nav-links li button {
      width: 100%;
      text-align: left;
      padding: 12px 20px;
      margin-bottom: 8px;
      border: none;
      background: none;
      color: #666;
      cursor: pointer;
      border-radius: 10px;
      transition: all 0.3s ease;
      font-size: 15px;
    }

    .nav-links li button:hover {
      background: #f0f0f0;
      color: #b68b40;
    }

    .nav-links li button.active {
      background: #b68b40;
      color: white;
    }

    .dashboard-section {
      display: none;
    }

    .dashboard-section.active {
      display: block;
    }

    .section-title {
      color: #333;
      margin-bottom: 30px;
      font-size: 24px;
      font-weight: 500;
    }

    .btn {
      padding: 10px 20px;
      border-radius: 8px;
      border: none;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 14px;
    }

    .btn-primary {
      background: #b68b40;
      color: white;
    }

    .btn-outline {
      background: none;
      border: 1px solid #b68b40;
      color: #b68b40;
    }

    .address-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 70px;
      margin-top: 20px;
    }

    .address-card {
      background: #fafafa;
      border-radius: 12px;
      padding: 20px;
      position: relative;
    }

    .address-actions {
      position: absolute;
      top: 15px;
      right: 15px;
      display: flex;
      gap: 8px;
    }

    .wallet-overview {
      background: #fafafa;
      border-radius: 15px;
      padding: 30px;
      margin-bottom: 30px;
    }

    .wallet-balance {
      font-size: 32px;
      color: #333;
      margin: 15px 0;
    }

    .wallet-actions {
      display: flex;
      gap: 10px;
    }

    .transaction-table {
      width: 100%;
      border-collapse: collapse;
    }

    .transaction-table th {
      text-align: left;
      padding: 15px;
      border-bottom: 2px solid #f0f0f0;
      color: #666;
      font-weight: 500;
    }

    .transaction-table td {
      padding: 15px;
      border-bottom: 1px solid #f0f0f0;
      color: #333;
    }

    /* Statuses */
    .status-completed {
      /* background-color: #4CAF50; Green */
      color: white;
      padding: 5px 10px;
      border-radius: 5px;
    }

    .status-pending {
      /* background-color: #FF9800; Orange */
      color: white;
      padding: 5px 10px;
      border-radius: 5px;
    }

    .status-cancelled {
      /* background-color: #F44336; Red */
      color: white;
      padding: 5px 10px;
      border-radius: 5px;
    }
    .type-credit { color: #28a745; }
    .type-debit { color: #dc3545; }

    .logout-btn {
      color: #dc3545;
      margin-top: 20px;
    }
    .cancel-btn {
    background-color: #d9534f;
    color: white; /* White text color */
    border: none;
    padding: 8px 16px;
    font-size: 14px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  
  .cancel-btn:hover {
    background-color: #c9302c; 
  }

  .view-details-btn {
  background-color: #b68b40; 
  color: white; /* White text */
  border: none; /* Remove border */
  padding: 8px 16px; /* Padding for a comfortable button size */
  font-size: 14px; /* Font size */
  border-radius: 4px; /* Rounded corners */
  cursor: pointer; /* Pointer cursor on hover */
  transition: background-color 0.3s; /* Smooth transition for hover effect */
}

.view-details-btn:hover {
  background-color: #9f762f; 
}
.product-image {
  width: 50px;
  height: 50px;
  object-fit: cover;
  border-radius: 4px;
}
.product-list {
  display: flex;
  flex-direction: column;
}

.product-item {
  display: flex;
  align-items: center;
  margin-bottom: 5px;
}

.product-item img {
  width: 50px;
  height: 50px;
  margin-right: 10px;
}
.wallet-header {
      margin-bottom: 2rem;
    }

.wallet-card {
  background: linear-gradient(135deg, #232526 0%, #414345 100%);
  border-radius: 16px;
  padding: 2rem;
  color: white;
  margin-top: 1.5rem;
  box-shadow: 0 4px 15px rgba(35, 37, 38, 0.2);
}
    .balance-info {
      margin-bottom: 1.5rem;
    }

    .balance-label {
      font-size: 0.9rem;
      opacity: 0.9;
    }

    .balance-amount {
      font-size: 2.5rem;
      font-weight: 600;
      margin: 0.5rem 0;
    }

    .balance-date {
      font-size: 0.8rem;
      opacity: 0.8;
    }

    .wallet-actions {
      display: flex;
      gap: 1rem;
    }

    .wallet-actions .btn {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      padding: 0.8rem;
      border-radius: 8px;
      font-weight: 500;
    }

    .transactions-section {
      background: white;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .transactions-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .transaction-filters {
      display: flex;
      gap: 1rem;
      align-items: center;
      flex-wrap: wrap;
    }

    .search-box input {
      padding: 0.5rem 1rem;
      border: 1px solid #e0e0e0;
      border-radius: 6px;
      width: 250px;
      font-size: 0.9rem;
    }

    .filter-buttons {
      display: flex;
      gap: 0.5rem;
    }

    .filter-btn {
      padding: 0.5rem 1rem;
      border: 1px solid #e0e0e0;
      border-radius: 6px;
      background: white;
      cursor: pointer;
      font-size: 0.9rem;
      transition: all 0.3s ease;
    }

    .filter-btn.active {
      background: #b68b40;
      color: white;
      border-color: #b68b40;
    }

    .transactions-table-wrapper {
      overflow-x: auto;
    }

    .transaction-table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0 0.5rem;
    }

    .transaction-table th {
      background: #f8f9fa;
      padding: 1rem;
      font-weight: 500;
      text-align: left;
      color: #666;
    }

    .transaction-row {
      background: white;
      transition: all 0.3s ease;
    }

    .transaction-row:hover {
      background: #f8f9fa;
    }

    .transaction-row td {
      padding: 1rem;
      border-top: 1px solid #f0f0f0;
      border-bottom: 1px solid #f0f0f0;
    }

    .date-group {
      display: flex;
      flex-direction: column;
    }

    .date {
      font-weight: 500;
    }

    .time {
      font-size: 0.8rem;
      color: #666;
    }

    .transaction-info {
      display: flex;
      flex-direction: column;
    }

    .transaction-title {
      font-weight: 500;
    }

    .transaction-id {
      font-size: 0.8rem;
      color: #666;
    }

    .badge {
      padding: 0.25rem 0.75rem;
      border-radius: 999px;
      font-size: 0.8rem;
      font-weight: 500;
    }

    .badge.credit {
      background: #e8f5e9;
      color: #2e7d32;
    }

    .badge.debit {
      background: #ffebee;
      color: #c62828;
    }

    .amount {
      font-weight: 500;
    }

    .amount.credit {
      color: #2e7d32;
    }

    .amount.debit {
      color: #c62828;
    }

    .status-badge {
      padding: 0.25rem 0.75rem;
      border-radius: 999px;
      font-size: 0.8rem;
      font-weight: 500;
    }

    .status-badge.success {
      background: #e8f5e9;
      color: #2e7d32;
    }

    .status-badge.pending {
      background: #fff3e0;
      color: #ef6c00;
    }
  
  </style>
</head>
<body>
  <div class="dashboard-container">
    <div class="sidebar">
      <div class="profile-section">
        <div class="profile-avatar"><%= user.name.charAt(0).toUpperCase() %></div>
        <h2 class="profile-name"><%= user.name %></h2>
        <p class="profile-email"><%= user.email %></p>
      </div>
      <ul class="nav-links">
        <li><button onclick="showSection('dashboard')" class="nav-button active">Dashboard</button></li>
        <li><button onclick="showSection('address')" class="nav-button">My Address</button></li>
        <li><button onclick="showSection('orders')" class="nav-button">Orders</button></li>
        <li><button onclick="showSection('wallet')" class="nav-button">My Wallet</button></li>
        <li><button onclick="showSection('referrals')" class="nav-button">Referrals</button></li>
        <li><button onclick="showSection('logout')" class="nav-button logout-btn">Logout</button></li>
      </ul>
    </div>

    <div class="main-content">
      <!-- Dashboard Section -->
      <div id="dashboard" class="dashboard-section active" style="max-width: 900px; width: 100%; background-color: #fff; box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1); border-radius: 8px; overflow: hidden;">
        <!-- Header -->
        <div class="header" style=" color: #fff; padding: 20px; text-align: center;">
          <h2 style="font-size: 1.6em; margin: 0; color: #b68b40;">Dashboard</h2>
          <p style="font-size: 1em; color: #000000; margin-top: 5px;">Welcome, <%= user.name %></p>
        </div>

        <!-- User Info Section -->
        <div class="user-info" style="padding: 20px;">
          <h3 style="font-size: 1.4em; color: #333; margin-bottom: 10px; border-bottom: 2px solid #b68b40; padding-bottom: 5px;">User Profile</h3>
          <p style="font-size: 1em; color: #555; margin: 10px 0;"><strong style="color: #333;">Phone:</strong> <%= user.phone %></p>
          <p style="font-size: 1em; color: #555; margin: 10px 0;"><strong style="color: #333;">Email:</strong> <%= user.email %></p>
          <div style="margin-top: 20px; text-align: center;">
            <a href="/change-email" style="font-size: 0.9em; color: #fff; background-color: #b68b40; padding: 8px 16px; border-radius: 4px; text-decoration: none; transition: background-color 0.3s ease;">Change Email</a>
            <a href="/change-password" style="font-size: 0.9em; color: #fff; background-color: #b68b40; padding: 8px 16px; border-radius: 4px; text-decoration: none; transition: background-color 0.3s ease; margin-left: 10px;">Change Password</a>
          </div>
        </div>
      </div>

      <!-- Address Section -->
      <div id="address" class="dashboard-section">
        <h2 class="section-title">My Addresses</h2>
        <a href="/addAddress">
          <button class="btn btn-primary">+ Add New Address</button>
        </a>
        
        <div class="address-grid">
          <%userAddress.address.forEach((addr)=>{%>
            <div class="address-card"> 
              <div class="address-actions">
                <a href="/editAddress?id=<%= addr._id %>">
                  <button class="btn btn-outline">Edit</button>
                </a>
                <a href="/deleteAddress?id=<%= addr._id %>" onclick="return confirmDelete(event)">
                  <button class="btn btn-outline">Delete</button>
               </a>
              </div>
              <h3><%= addr.addressType %></h3><br>
              <p><%= addr.name %></p>
              <p><%= addr.city %></p>
              <p><%= addr.landMark %></p>
              <p><%= addr.state %></p>
              <p><%= addr.pincode %></p>
              <p><%= addr.phone %></p>
              <p><%= addr.altPhone %></p>
            </div>
          <%})%>
          
          
        </div>
      </div>

      <!-- Orders Section -->
<div id="orders" class="dashboard-section">
  <h2 class="section-title">My Orders</h2>
  <table class="transaction-table">
    <thead>
      <tr>
        
        <th>Product Name</th>
        <th>Date</th>
        <th>Status</th>
        <th>Quantity</th>
        <th>Payment Method</th>
        <th>Total</th> 
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <% orders.forEach(order => { %>
        <tr id="order-row-<%= order._id %>">
          <!-- Product Names -->
          <td colspan="1">
            <div class="product-list">
              <% order.orderedItems.forEach(item => { %>
                <div class="product-item">
                  <p><%= item.product.productName %></p>
                </div>
              <% }) %>
            </div>
          </td>

          <!-- Date -->
          <td><%= new Date(order.createdOn).toLocaleDateString() %></td>

          <!-- Status -->
          <td id="order-status-<%= order._id %>" class="status-<%= order.status.toLowerCase() %>">
            <%= order.status %>
          </td>

          <!-- Quantity -->
        <td>
          <div>
            <% order.orderedItems.forEach(item => { %>
              <div><%= item.quantity %></div>
            <% }) %>
          </div>
        </td>
        <!-- Payment Method -->
        <td><%= order.paymentMethod %></td>

          <!-- Total Amount -->
          <td>₹ <%= order.finalAmount %></td>

          <!-- Action -->
          <td id="order-action-<%= order._id %>">
            <a class="view-details-btn btn" style="margin-right: 5px; text-decoration: none;" href="/orderDetails?id=<%= order._id %>">
              View Details
            </a>
            <% if (order.status === 'Pending') { %>
              <button class="cancel-btn" onclick="confirmCancelOrder('<%= order._id %>')">Cancel</button>
            <% } else { %>
              <span></span>
            <% } %>
          </td>
        </tr>
      <% }) %>
    </tbody>
  </table>
</div>


<!-- Wallet Section -->

<div id="wallet" class="dashboard-section">
  <div class="wallet-header">
    <h1>My Wallet</h1>
    <div class="wallet-card">
      <div class="balance-info">
        <span class="balance-label">Available Balance</span>
        <!-- Display balance dynamically -->
        <h1 class="balance-amount">₹<%= walletData.balance.toFixed(2) %></h1>
        <span class="balance-date">As of <%= new Date().toLocaleDateString() %></span>
      </div>
      <div class="wallet-actions">
        <button class="btn btn-primary" onclick="handleTransaction('deposit')">
          <i class="fas fa-plus-circle"></i> Add Money
        </button>
        <button class="btn btn-outline" onclick="handleTransaction('withdraw')">
          <i class="fas fa-minus-circle"></i> Withdraw
        </button>
      </div>
    </div>
  </div>

  <div class="transactions-section">
    <div class="transactions-header">
      <h3>Transaction History</h3>
      <div class="transaction-filters">
        <div class="search-box">
          <input type="text" id="searchTransaction" placeholder="Search transactions..." onkeyup="filterTransactions()">
        </div>
        <div class="filter-buttons">
          <button class="filter-btn active" data-filter="all">All</button>
          <button class="filter-btn" data-filter="credit">Credit</button>
          <button class="filter-btn" data-filter="debit">Debit</button>
          <button class="filter-btn" data-filter="refund">Refund</button> <!-- Added Refund filter -->
        </div>
      </div>
    </div>

    <div class="transactions-table-wrapper">
      <table class="transaction-table">
        <thead>
          <tr>
            <th>Date</th>
            <th>Product</th>
            <th>Type</th>
            <th>Amount</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          <!-- Render transactions dynamically -->
          <% walletData.transactions.forEach(transaction => { %>
          <tr class="transaction-row <%= transaction.type %>">
            <td>
              <div class="date-group">
                <span class="date"><%= new Date(transaction.date).toLocaleDateString() %></span>
              </div>
            </td>
            <td>
              <div class="transaction-info">
                <% if (transaction.orderId && transaction.orderId.orderedItems.length) { %>
                  <% transaction.orderId.orderedItems.forEach(item => { %>
                    <span class="transaction-title"><%= item.product.productName %></span><br> <!-- Corrected to item.product.name -->
                  <% }); %>
                <% } else { %>
                  <span class="transaction-title">No Product Available</span>
                <% } %>
              </div>
            </td>
            <td>
              <span class="badge <%= transaction.type %>">
                <%= transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1) %>
              </span>
            </td>
            <td class="amount <%= transaction.type %>">
              <%= (transaction.type === 'credit' || transaction.type === 'refund') ? '+' : '-' %>₹<%= transaction.amount.toFixed(2) %>
            </td>
            <td>
              <!-- Add dynamic status for "Refund" if applicable -->
              <span class="status-badge <%= transaction.status === 'Refunded' ? 'warning' : 'success' %>">
                <%= transaction.status === 'Refunded' ? 'Refunded' : 'Completed' %>
              </span>
            </td>
          </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
  </div>
</div>




      <!-- Referrals Section -->
      <div id="referrals" class="dashboard-section">
        <h2 class="section-title">Referrals</h2>
        <p>Invite your friends and earn rewards!</p> <br>
        <button class="btn btn-outline">Copy Referral Link</button>
      </div>

      <!-- Logout Section -->
      <div id="logout" class="dashboard-section">
        <h2 class="section-title">Logout</h2>
        <p>Are you sure you want to logout?</p><br>
        <button class="btn btn-outline" onclick="confirmLogout(event)">
            <span style="color: #b68b40; text-decoration: none; transition: color 0.3s;">Logout</span>
        </button>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    function showSection(sectionId) {
      // Hide all sections
      const sections = document.querySelectorAll('.dashboard-section');
      sections.forEach(section => section.classList.remove('active'));

      // Remove active class from all sidebar buttons
      const buttons = document.querySelectorAll('.nav-links button');
      buttons.forEach(button => button.classList.remove('active'));

      // Show the selected section and activate the respective button
      document.getElementById(sectionId).classList.add('active');
      const activeButton = Array.from(buttons).find(button => button.textContent.toLowerCase() === sectionId);
      if (activeButton) activeButton.classList.add('active');
      }

      // Load 'dashboard' as default active section on page load
      document.addEventListener('DOMContentLoaded', () => {
          showSection('dashboard');
      });
      // Check the URL hash on page load and show the correct section
      window.onload = function() {
        const hash = window.location.hash.substring(1); // Get the hash without the '#'
        if (hash) {
          showSection(hash); // Show the section based on the hash
        } else {
          showSection('dashboard'); // Default to 'dashboard' section
        }
    };
    
    function confirmDelete(event) {
      event.preventDefault(); // Prevent the default link action
      const url = event.currentTarget.href; // Store the link URL

      // Show the SweetAlert confirmation dialog
      Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#b68b40',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      }).then((result) => {
        if (result.isConfirmed) {
          // Redirect to the delete URL if confirmed
          window.location.href = url;
        }
      });
    }
    function confirmLogout(event) {
      event.preventDefault(); // Prevent the default form action

      // Show the SweetAlert confirmation dialog
      Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to log out?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#b68b40',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, logout'
      }).then((result) => {
        if (result.isConfirmed) {
          // Redirect to the logout URL if confirmed
          window.location.href = '/logout';
        }
      });
    }

    async function confirmCancelOrder(orderId) {
    const result = await Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to cancel this order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#b68b40',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it'
    });

    if (result.isConfirmed) {
        try {
            // Make the server request to cancel the order
            const response = await fetch('/cancelOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId: orderId }),
            });

            const data = await response.json();

            if (data.message.includes('successfully')) {
                Swal.fire(
                    'Cancelled!',
                    `Order ${orderId} has been cancelled.`,
                    'success'
                ).then(() => {
                    // Update the UI after successful cancellation
                    document.getElementById(`order-status-${orderId}`).innerText = 'Cancelled';
                    document.getElementById(`order-action-${orderId}`).innerHTML = '<span>Cancelled</span>';
                });
            } else {
                Swal.fire(
                    'Error!',
                    data.message || 'Something went wrong while cancelling the order.',
                    'error'
                );
            }
        } catch (err) {
            // Catch any errors and show them in the Swal
            Swal.fire(
                'Error!',
                'Unable to reach the server or other issue occurred.',
                'error'
            );
        }
    }
}
// Add this to your existing script section
document.addEventListener('DOMContentLoaded', function() {
      // Filter buttons functionality
      const filterButtons = document.querySelectorAll('.filter-btn');
      const transactionRows = document.querySelectorAll('.transaction-row');

      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          // Remove active class from all buttons
          filterButtons.forEach(btn => btn.classList.remove('active'));
          // Add active class to clicked button
          button.classList.add('active');

          const filterValue = button.getAttribute('data-filter');

          transactionRows.forEach(row => {
            if (filterValue === 'all') {
              row.style.display = '';
            } else {
              row.style.display = row.classList.contains(filterValue) ? '' : 'none';
            }
          });
        });
      });
    });

    function filterTransactions() {
      const searchInput = document.getElementById('searchTransaction');
      const filter = searchInput.value.toLowerCase();
      const rows = document.querySelectorAll('.transaction-row');

      rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(filter) ? '' : 'none';
      });
    }

    function handleTransaction(type) {
      Swal.fire({
        title: type === 'deposit' ? 'Add Money' : 'Withdraw',
        input: 'number',
        inputLabel: 'Amount',
        inputPlaceholder: 'Enter amount',
        showCancelButton: true,
        confirmButtonColor: '#b68b40',
        cancelButtonColor: '#d33',
        confirmButtonText: type === 'deposit' ? 'Add' : 'Withdraw',
        inputValidator: (value) => {
          if (!value) {
            return 'Please enter an amount!';
          }
          if (value <= 0) {
            return 'Amount must be greater than 0!';
          }
        }
      }).then((result) => {
        if (result.isConfirmed) {
          // Here you would typically make an API call to process the transaction
          Swal.fire(
            'Success!',
            `${type === 'deposit' ? 'Money added' : 'Withdrawal processed'} successfully!`,
            'success'
          );
        }
      });
    }

  </script>
</body>
</html>
