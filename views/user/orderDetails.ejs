<%- include("../partials/user/header.ejs") %>


    <style>
        :root {
            --primary-color: #b68b40;
            --primary-light: #d1a666;
            --primary-dark: #8c6f33;
            --text-color: #333;
            --background-color: #f4f4f4;
            --neutral-light: #f9f5f0;
            --neutral-dark: #4a4a4a;
        }

        body {
            background-color: var(--background-color);
            font-family: 'Arial', sans-serif;
            color: var(--neutral-dark);
            line-height: 1.6;
        }

        .order-details-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 1.5rem;
            background-color: white;
            box-shadow: 0 6px 12px rgba(182, 139, 64, 0.1);
            border-radius: 12px;
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--primary-color);
        }

        .invoice-download-btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 10px 18px;
            background-color: var(--primary-color);
            border: none;
            color: white;
            text-decoration: none;
            border-radius: 6px;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .invoice-download-btn:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(182, 139, 64, 0.2);
        }

        .badge {
            font-size: 0.8rem;
            padding: 5px 10px;
            border-radius: 4px;
            font-weight: 500;
        }

        .order-status-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            background-color: var(--neutral-light);
            padding: 1rem;
            border-radius: 8px;
        }

        .product-list .product-item {
            display: flex;
            align-items: center;
            padding: 1rem 0;
            border-bottom: 1px solid #e9e3d8;
        }

        .product-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
            margin-right: 1rem;
            box-shadow: 0 4px 6px rgba(182, 139, 64, 0.1);
        }

        .order-summary-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .summary-card {
            background-color: var(--neutral-light);
            padding: 1.25rem;
            border-radius: 8px;
        }

        /* Status Badge Colors */
        .badge-pending {
            background-color: #FEF3C7;
            color: #92400E;
        }

        .badge-processing {
            background-color: #DBEAFE;
            color: #1E40AF;
        }

        .badge-completed {
            background-color: #D1FAE5;
            color: #065F46;
        }

        .badge-failed {
            background-color: #FEE2E2;
            color: #991B1B;
        }

        .badge-shipped {
            background-color: #E0E7FF;
            color: #3730A3;
        }

        .badge-delivered {
            background-color: #D1FAE5;
            color: #065F46;
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .order-summary-grid {
                grid-template-columns: 1fr;
            }

            .order-header,
            .order-status-section {
                flex-direction: column;
                text-align: center;
            }
        }

        .text-primary {
            color: var(--primary-color) !important;
        }

        /* Override Bootstrap's btn-primary class */
        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
        }
    </style>

    <div id="orderDetails" class="order-details-container">
        <!-- Order Header -->
        <div class="order-header">
            <div>
                <h2 class="mb-2">Order Details</h2>
                <p class="text-muted">Order ID: <%= orders.orderId %> | Placed on: <%= new
                            Date(orders.createdOn).toLocaleString() %>
                </p>
            </div>
            <div>
                <!-- <button id="downloadInvoiceBtn" class="invoice-download-btn">
                    <i class="bi bi-download"></i> Download Invoice
                </button> -->
                <button id="downloadInvoice" class="btn"> Download Invoice</button>

            </div>
        </div>

        <!-- Order Status -->
        <div class="order-status-section">
            <div>
                <h5>Payment Status:
                    <span class="badge 
                        <%= orders.paymentStatus === 'Pending' ? 'badge-pending' : 
                            orders.paymentStatus === 'Processing' ? 'badge-processing' : 
                            orders.paymentStatus === 'Completed' ? 'badge-completed' : 
                            'badge-failed' %>">
                        <%= orders.paymentStatus %>
                    </span>

                </h5>
                <br>
                <h5>Shipment Status:
                    <span class="badge 
                        <%= orders.status === 'Pending' ? 'badge-pending' : 
                            orders.status === 'Processing' ? 'badge-processing' : 
                            orders.status === 'Shipped' ? 'badge-shipped' : 
                            orders.status === 'Delivered' ? 'badge-delivered' : 
                            'badge-failed' %>">
                        <%= orders.status %>
                    </span>
                </h5>
            </div>
            <div>
                <h4 class="text-primary">Total: ₹ <%= orders.finalAmount.toLocaleString() %>
                </h4>
                <% if (orders.paymentStatus==='Payment failed' && orders.paymentMethod==='Online' ) { %>
                    <button class="btn btn-primary mt-2" onclick="retryPayment('<%= orders.finalAmount %>','<%= orders._id%>')">
                        Continue Payment
                    </button>
                    <% } %>
            </div>
        </div>

        <!-- Product List -->
        <div class="product-list">
            <h4 class="mb-3">Ordered Items</h4>
            <% orders.orderedItems.forEach(function(item) { %>
                <div class="product-item">
                    <img src="uploads/re-image/<%= item.product.productImage[0] %>"
                        alt="<%= item.product.productName %>" class="product-image">
                    <div class="flex-grow-1">
                        <h5>
                            <%= item.product.productName %>
                        </h5>
                        <p class="text-muted">Quantity: <%= item.quantity %>
                        </p>
                    </div>
                    <div>
                        <h5>₹ <%= item.price.toLocaleString() %>
                        </h5>
                    </div>
                </div>
                <% }); %>
        </div>

        <!-- Order Summary Grid -->
        <div class="order-summary-grid">
            <!-- Shipping Details -->
            <div class="summary-card">
                <h5>Shipping Details</h5> <br>
                <% if (address && address.length> 0) { %>
                    <% address.forEach(function(addr) { %>
                        <p>
                            <%= addr.name %>
                        </p>
                        <p>
                            <%= addr.addressType %>, <%= addr.city %>, <%= addr.state %> - <%= addr.pincode %>
                        </p>
                        <p>Phone: <%= addr.phone %>
                        </p>
                        <% }); %>
                            <% } else { %>
                                <p>No shipping address available.</p>
                                <% } %>
            </div>

            <!-- Payment Method -->
            <div class="summary-card">
                <h5>Payment Method</h5> <br>
                <p><strong>
                        <%= orders.paymentMethod %>
                    </strong></p>
            </div>

            <!-- Order Summary -->
            <div class="summary-card">
                <h4>Order Summary</h4>
                <br>
                <div class="order-summary-details">
                    <div class="summary-row">
                        <span>Subtotal:</span>
                        <span>₹ <%= orders.totalPrice.toLocaleString() %></span>
                    </div>
                    <div class="summary-row">
                        <span>Discount:</span>
                        <span>₹ <%= orders.discount.toLocaleString() %></span>
                    </div>
                    <div class="summary-row">
                        <span>Shipping Charges:</span>
                        <span>₹ <%= orders.shippingCharges.toLocaleString() %></span>
                    </div>
                    <div class="summary-row">
                        <span>GST (18%):</span>
                        <span>₹ <%= orders.GST.toLocaleString() %></span>
                    </div>
                    <hr>
                    <div class="summary-row total-row">
                        <h4>Total</h4>
                        <h4 class="text-primary">₹ <%= orders.finalAmount.toLocaleString() %>
                        </h4>
                    </div>
                </div>
            </div>

        </div>
    </div>



    <!-- Required Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        document.getElementById('downloadInvoice').addEventListener('click', function () {
            const orderId = '<%= orders._id%>'; // Dynamically set order ID
            if (orderId) {
                window.open(`/downloadInvoice?id=${orderId}`, '_blank');
            } else {
                alert('Order ID is missing. Cannot download the invoice.');
            }
        });
        async function retryPayment(Amount,orderId) {
            const createOrderResponse = await fetch('/createRazorpay', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    amount: parseFloat(Amount),
                    currency: 'INR'
                })
            });
            console.log("create",createOrderResponse)
            if (!createOrderResponse.ok) {
                const errorData = await createOrderResponse.json().catch(() => null);
                const errorMessage = errorData?.error || await createOrderResponse.text();
                console.error(`Create order failed: ${errorMessage}`);
                throw new Error(errorMessage);
            }
            const order = await createOrderResponse.json();
            console.log('Razorpay Order:', order);

            const options = {
                key: 'rzp_test_4NiseW7Wqk146s',
                amount: order.amount,
                currency: order.currency,
                name: 'Zoul',
                description: 'Purchase Transaction',
                order_id: order.id,
                handler: async function (response) {
                    console.log("enterd handler function response:", response);
                    try {
                        const paymentDetails = {
                            paymentId: response.razorpay_payment_id,
                            orderId: orderId,
                            status: "payment completed",
                            razorpayId: response.razorpay_order_id,
                            signature: response.razorpay_signature,
                        };

                        const updateResponse = await fetch('/updatePayment', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(paymentDetails),
                        });

                        const updateResult = await updateResponse.json();
                        console.log("updateResult", updateResult)

                        if (updateResponse && updateResult.success) {

                            window.location.href = `/order/?id=${updateResult.orderId}`;
                        } else {
                            throw new Error(updateResult.message || 'Payment status update failed.');
                        }
                    } catch (error) {
                        console.error('Error updating payment status:', error);

                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Error',
                            text: error.message,
                            confirmButtonText: 'Okay',
                            confirmButtonColor: '#007bff',
                        });
                    }
                },
                theme: { color: '#39b4ac' },
                modal: {
                    ondismiss: function () {
                        console.log('Checkout form closed');
                        // Handle modal dismissal - maybe cleanup or show message
                    }
                }
            };

            console.log("Initializing Razorpay instance...");
            const rzp = new Razorpay(options);

            rzp.on('payment.failed', async function (response) {
                console.error('Payment failed:', response.error);
                const paymentDetails = {
                    paymentId: response.razorpay_payment_id,
                    orderId: orderId,
                    status: "payment completed",
                    razorpayId: response.razorpay_order_id,
                    signature: response.razorpay_signature,
                };

                const updateResponse = await fetch('/updatePayment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(paymentDetails),
                });

                Swal.fire({
                    icon: 'error',
                    title: 'Payment Failed',
                    text: 'Payment is Failed Please Retry From Order Detials',
                    confirmButtonColor: '#39b4ac',
                }).then(() => {
                    window.location.href = '/'
                })
            });

            console.log("Opening Razorpay modal...");
            rzp.open();

        }


    </script>




    <%- include("../partials/user/footer.ejs") %>